# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ..common import VarianceOrderService_pb2 as VarianceOrderService__pb2
from ..common import response_pb2 as response__pb2


class VarianceOrderServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.VarianceOrderCreate = channel.unary_unary(
                '/invtransaction.VarianceOrderService/VarianceOrderCreate',
                request_serializer=VarianceOrderService__pb2.CreateVarianceOrderRequest.SerializeToString,
                response_deserializer=response__pb2.CommonResponse.FromString,
                )
        self.VarianceOrderConfirm = channel.unary_unary(
                '/invtransaction.VarianceOrderService/VarianceOrderConfirm',
                request_serializer=VarianceOrderService__pb2.VarianceOrderConfirmRequest.SerializeToString,
                response_deserializer=response__pb2.CommonResponse.FromString,
                )
        self.VarianceOrderHandle = channel.unary_unary(
                '/invtransaction.VarianceOrderService/VarianceOrderHandle',
                request_serializer=VarianceOrderService__pb2.VarianceOrderHandleRequest.SerializeToString,
                response_deserializer=response__pb2.CommonResponse.FromString,
                )


class VarianceOrderServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def VarianceOrderCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VarianceOrderConfirm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VarianceOrderHandle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VarianceOrderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'VarianceOrderCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.VarianceOrderCreate,
                    request_deserializer=VarianceOrderService__pb2.CreateVarianceOrderRequest.FromString,
                    response_serializer=response__pb2.CommonResponse.SerializeToString,
            ),
            'VarianceOrderConfirm': grpc.unary_unary_rpc_method_handler(
                    servicer.VarianceOrderConfirm,
                    request_deserializer=VarianceOrderService__pb2.VarianceOrderConfirmRequest.FromString,
                    response_serializer=response__pb2.CommonResponse.SerializeToString,
            ),
            'VarianceOrderHandle': grpc.unary_unary_rpc_method_handler(
                    servicer.VarianceOrderHandle,
                    request_deserializer=VarianceOrderService__pb2.VarianceOrderHandleRequest.FromString,
                    response_serializer=response__pb2.CommonResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'invtransaction.VarianceOrderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VarianceOrderService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def VarianceOrderCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/invtransaction.VarianceOrderService/VarianceOrderCreate',
            VarianceOrderService__pb2.CreateVarianceOrderRequest.SerializeToString,
            response__pb2.CommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VarianceOrderConfirm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/invtransaction.VarianceOrderService/VarianceOrderConfirm',
            VarianceOrderService__pb2.VarianceOrderConfirmRequest.SerializeToString,
            response__pb2.CommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VarianceOrderHandle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/invtransaction.VarianceOrderService/VarianceOrderHandle',
            VarianceOrderService__pb2.VarianceOrderHandleRequest.SerializeToString,
            response__pb2.CommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
