# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import WorkOrderCommonServer_pb2 as WorkOrderCommonServer__pb2
import response_pb2 as response__pb2


class WorkOrderCommonServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.executeActionAgg = channel.unary_unary(
                '/invtransaction.WorkOrderCommonService/executeActionAgg',
                request_serializer=WorkOrderCommonServer__pb2.ExecuteActionAggRequest.SerializeToString,
                response_deserializer=response__pb2.CommonResponse.FromString,
                )
        self.queryWorkOrderByContainerCodeAndStatus = channel.unary_unary(
                '/invtransaction.WorkOrderCommonService/queryWorkOrderByContainerCodeAndStatus',
                request_serializer=WorkOrderCommonServer__pb2.QueryWorkOrderByContainerCodeAndStatusRequest.SerializeToString,
                response_deserializer=WorkOrderCommonServer__pb2.QueryWorkOrderByContainerCodeAndStatusResponse.FromString,
                )


class WorkOrderCommonServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def executeActionAgg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def queryWorkOrderByContainerCodeAndStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkOrderCommonServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'executeActionAgg': grpc.unary_unary_rpc_method_handler(
                    servicer.executeActionAgg,
                    request_deserializer=WorkOrderCommonServer__pb2.ExecuteActionAggRequest.FromString,
                    response_serializer=response__pb2.CommonResponse.SerializeToString,
            ),
            'queryWorkOrderByContainerCodeAndStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.queryWorkOrderByContainerCodeAndStatus,
                    request_deserializer=WorkOrderCommonServer__pb2.QueryWorkOrderByContainerCodeAndStatusRequest.FromString,
                    response_serializer=WorkOrderCommonServer__pb2.QueryWorkOrderByContainerCodeAndStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'invtransaction.WorkOrderCommonService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorkOrderCommonService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def executeActionAgg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/invtransaction.WorkOrderCommonService/executeActionAgg',
            WorkOrderCommonServer__pb2.ExecuteActionAggRequest.SerializeToString,
            response__pb2.CommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def queryWorkOrderByContainerCodeAndStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/invtransaction.WorkOrderCommonService/queryWorkOrderByContainerCodeAndStatus',
            WorkOrderCommonServer__pb2.QueryWorkOrderByContainerCodeAndStatusRequest.SerializeToString,
            WorkOrderCommonServer__pb2.QueryWorkOrderByContainerCodeAndStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
