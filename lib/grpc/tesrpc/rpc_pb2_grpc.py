# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from lib.grpc.tesrpc import rpc_pb2 as lib_dot_grpc_dot_tesrpc_dot_rpc__pb2


class TesRpcStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TestStream = channel.unary_stream(
                '/tesrpc.TesRpc/TestStream',
                request_serializer=lib_dot_grpc_dot_tesrpc_dot_rpc__pb2.TestRequest.SerializeToString,
                response_deserializer=lib_dot_grpc_dot_tesrpc_dot_rpc__pb2.TestResponse.FromString,
                )
        self.GetTaskNotice = channel.stream_stream(
                '/tesrpc.TesRpc/GetTaskNotice',
                request_serializer=lib_dot_grpc_dot_tesrpc_dot_rpc__pb2.GetTaskNoticeRequest.SerializeToString,
                response_deserializer=lib_dot_grpc_dot_tesrpc_dot_rpc__pb2.GetTaskNoticeResponse.FromString,
                )
        self.GetConveyorDataReport = channel.stream_stream(
                '/tesrpc.TesRpc/GetConveyorDataReport',
                request_serializer=lib_dot_grpc_dot_tesrpc_dot_rpc__pb2.GetConveyorDataReportRequest.SerializeToString,
                response_deserializer=lib_dot_grpc_dot_tesrpc_dot_rpc__pb2.GetConveyorDataReportResponse.FromString,
                )


class TesRpcServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TestStream(self, request, context):
        """
        测试用
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskNotice(self, request_iterator, context):
        """
        获取TES任务结果通知
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConveyorDataReport(self, request_iterator, context):
        """
        箱线数据上报
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TesRpcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TestStream': grpc.unary_stream_rpc_method_handler(
                    servicer.TestStream,
                    request_deserializer=lib_dot_grpc_dot_tesrpc_dot_rpc__pb2.TestRequest.FromString,
                    response_serializer=lib_dot_grpc_dot_tesrpc_dot_rpc__pb2.TestResponse.SerializeToString,
            ),
            'GetTaskNotice': grpc.stream_stream_rpc_method_handler(
                    servicer.GetTaskNotice,
                    request_deserializer=lib_dot_grpc_dot_tesrpc_dot_rpc__pb2.GetTaskNoticeRequest.FromString,
                    response_serializer=lib_dot_grpc_dot_tesrpc_dot_rpc__pb2.GetTaskNoticeResponse.SerializeToString,
            ),
            'GetConveyorDataReport': grpc.stream_stream_rpc_method_handler(
                    servicer.GetConveyorDataReport,
                    request_deserializer=lib_dot_grpc_dot_tesrpc_dot_rpc__pb2.GetConveyorDataReportRequest.FromString,
                    response_serializer=lib_dot_grpc_dot_tesrpc_dot_rpc__pb2.GetConveyorDataReportResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tesrpc.TesRpc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TesRpc(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TestStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/tesrpc.TesRpc/TestStream',
            lib_dot_grpc_dot_tesrpc_dot_rpc__pb2.TestRequest.SerializeToString,
            lib_dot_grpc_dot_tesrpc_dot_rpc__pb2.TestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTaskNotice(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/tesrpc.TesRpc/GetTaskNotice',
            lib_dot_grpc_dot_tesrpc_dot_rpc__pb2.GetTaskNoticeRequest.SerializeToString,
            lib_dot_grpc_dot_tesrpc_dot_rpc__pb2.GetTaskNoticeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetConveyorDataReport(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/tesrpc.TesRpc/GetConveyorDataReport',
            lib_dot_grpc_dot_tesrpc_dot_rpc__pb2.GetConveyorDataReportRequest.SerializeToString,
            lib_dot_grpc_dot_tesrpc_dot_rpc__pb2.GetConveyorDataReportResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
